- name: "Clean cert files"
  file: path=/opt/k8s/cert state=absent

- name: "Mkdir /opt/k8s"
  file:
   path: /opt/k8s/cert
   state: directory

- name: "Mkdir /etc/kubernetes"
  file:
    path: /etc/kubernetes
    state: directory

- name: "Mkdir /var/log/kubernetes"
  file:
    path: /var/log/kubernetes/nginx
    state: directory

- name: "remove docker_gwbridge"
  shell: "docker network rm docker_gwbridge"
  ignore_errors: true

- name: "Create CA cert and key file"
  args:
   chdir: /opt/k8s/cert/
  shell: "openssl genrsa -out ca.key 2048 && openssl req -x509 -new -nodes -key ca.key -subj '/CN=wemeeting.hauwei.com' -days 5000 -out ca.crt"
  delegate_to: "{{groups['k8s-master'][0]}}"
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Sync CA files to every node"
  synchronize: src=/opt/k8s/cert/ dest=/opt/k8s/cert/
  delegate_to: "{{groups['k8s-master'][0]}}"
  when: "'k8s-master' in group_names"

- name: "Upload ssl config file"
  template: src=master_ssl.conf.j2 dest=/opt/k8s/master_ssl.conf
  become: yes
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Create master cert and key file (for kube-apiserver)"
  shell: "openssl genrsa -out server.key 2048 && \
        openssl req -new -key server.key -subj '/CN={{groups['k8s-master'][0]}}' -config /opt/k8s/master_ssl.conf -out server.csr && \
        openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 5000 -extensions v3_req -extfile /opt/k8s/master_ssl.conf -out server.crt"
  args:
   chdir: /opt/k8s/cert/
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Create master cert and key file (for kube-controller-manager and kube-scheduler and kube-dns)"
  shell: "openssl genrsa -out cs_client.key 2048 && \
          openssl req -new -key cs_client.key -subj '/CN={{ansible_ssh_host}}' -out cs_client.csr && \
          openssl x509 -req -in cs_client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out cs_client.crt -days 5000"
  args:
    chdir: /opt/k8s/cert/
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Sync master certs  to every node"
  synchronize: src=/opt/k8s/cert/ dest=/opt/k8s/cert/
  delegate_to: "{{groups['k8s-master'][0]}}"

- name: "Install master require bin packages"
  unarchive:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "kube-apiserver.tar.gz", dest: "/usr/bin/" }
    - { src: "kube-controller-manager.tar.gz", dest: "/usr/bin/" }
    - { src: "kube-scheduler.tar.gz", dest: "/usr/bin/" }
    - { src: "kube-dns.tar.gz", dest: "/usr/bin/" }
    - { src: "kubectl.tar.gz", dest: "/usr/bin/" }

- name: "Upload kubeconfig-master to master node"
  copy:
    src: kubeconfig-master
    dest: /etc/kubernetes/kubeconfig-master
  when: "ansible_ssh_host == groups['k8s-master'][0]"


- name: "Install api-server systemd service file"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "kube-apiserver.service.j2", dest: "/etc/systemd/system/kube-apiserver.service" }
    - { src: "kube-controller-manager.service.j2", dest: "/etc/systemd/system/kube-controller-manager.service" }
    - { src: "kube-scheduler.service.j2", dest: "/etc/systemd/system/kube-scheduler.service" }
    - { src: "kube-dns.service.j2 ", dest: "/etc/systemd/system/kube-dns.service" }
    - { src: "flanneld.service.j2", dest: "/etc/systemd/system/flanneld.service" }
    - { src: "docker.service.j2", dest: "/etc/systemd/system/docker.service" }
  become: yes
  when: "'k8s-master' in group_names"

- name: "Set flanneld subnet"
  shell: "iptables -t nat -F && ifconfig docker0 down &&  brctl delbr docker0"

- name: "Restart all master service"
  systemd:
    name: "{{ item }}"
    state: restarted
    enabled: yes
    daemon_reload: yes
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
    - kube-dns
    - flanneld
    - docker
  ignore_errors: true
  when: "'k8s-master' in group_names"
